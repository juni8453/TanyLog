plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.blog'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-jpa'
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

	annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testImplementation group: 'org.springframework.security', name: 'spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.named('test') {
	useJUnitPlatform()
}

// compileJava -> test -> asciidoctor -> bootJar 순으로 실행

// gradle은 build/generated-snippets에 스니펫이 생성되므로, 스니펫 생성 디렉토리를 변수에 담는다.
ext {
	set('snippetsDir', file("build/generated-snippets"))
}

// 테스트 Task 의 아웃풋 디렉토리를 스니펫 저장 위치로 설정
test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

// 스니펫 저장 위치를 인풋으로 지정.
// asciidoctor Task 는 테스트 Task 수행 이후에 수행 (테스트 이후 문서가 생성되도록)
asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

// asciidoctor 설정. 기존에 존재하는 docs를 삭제해준다.
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task createDocument(type: Copy) {
	dependsOn asciidoctor

	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

// build 전 createDocument(REST Docs 문서화) 실행!
build {
	dependsOn createDocument
}
